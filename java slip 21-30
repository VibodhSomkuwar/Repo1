slip 21
  //Write a java program to accept ‘N’ Subject Names from a user store them into LinkedList Collection and Display them by using Iterator interface.

import java.util.*;
class Main {
	public static void main(String[] args) {
		int n;
		Scanner sc = new Scanner(System.in);
		System.out.print("Enter how many n subjects: ");
		n = sc.nextInt();
		LinkedList<String> ll = new LinkedList<String>();
		for (int i = 0; i < n; i++) {
			System.out.print("Enter subject: ");
			ll.add(sc.next());
		}
		Iterator<String> it = ll.iterator();
		System.out.println("Subjects are: ");
		while (it.hasNext()) {
				System.out.println("\t" + it.next());
		}
	}
}

//Write a java program to solve producer consumer problem in which a producer
produces a value and consumer consume the value before producer generate the next
value. (Hint: use thread synchronization) 

class shop {
	int material;
	boolean flag = false;

	public synchronized int get() {
		while (flag == false) {
			try {
				wait();
			} catch (Exception e) {
				e.getStackTrace();
			}
		}
		flag = false;
		notify();
		return material;
	}

	public synchronized void put(int value) {
		while (flag == true) {
			try {
				wait();
			} catch (Exception e) {
				e.getStackTrace();
			}
		}
		material = value;
		flag = true;
		notify();
	}
}

class consumer extends Thread {
	shop sh;
	int no;

	public consumer(shop shp, int no) {
		sh = shp;
		this.no = no;
	}

	public void run() {
		int value = 0;
		for (int i = 0; i < 10; i++) {
			value = sh.get();
			System.out.println("Consumer#" + this.no + "get:" + value);
		}
	}
}

class producer extends Thread {
	shop sh;
	int no;

	public producer(shop s, int no) {
		sh = s;
		this.no = no;
	}

	public void run() {
		for (int i = 0; i < 10; i++) {
			sh.put(i);
			System.out.println("Producer#" + this.no + "put:" + i);
			try {
				sleep((int) (Math.random() * 100));
			} catch (Exception e) {
				e.getStackTrace();
			}
		}
	}
}

public class Main {
	public static void main(String[] args) {
		shop s = new shop();
		producer p = new producer(s, 1);
		consumer c = new consumer(s, 1);
		p.start();
		c.start();
	}
}
slip 22
  //Write a Menu Driven program in Java for the following: Assume Employee table with attributes (ENo, EName, Salary) is already created. 1. Insert 2. Update 3. Display 4. Exit. 

import java.sql.*;
import java.util.Scanner;

class Main {
	public static void main(String args[])
    {
        Scanner sc = new Scanner(System.in);
        int eno,k,ch,sal;
        String nm;
        String update;
        try{
        	Class.forName("com.mysql.cj.jdbc.Driver");
    		Connection cn = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");
            Statement st=cn.createStatement();
            do            {
                System.out.println("1. Insert. 2. Update 3. Display. 4. Exit");
                System.out.print("Enter your choice: ");
                ch=sc.nextInt();
                System.out.println("............................................");
                switch(ch)
                {
                    case 1:
                        System.out.print("How many records you want to inserted ? : ");
                        int n=sc.nextInt();
                        for(int i=0;i<n;i++)
                        {
                            System.out.println("Enter Employee No : ");
                            eno=sc.nextInt();
                            System.out.println("Enter Employee Name : ");
                            nm=sc.next();
                            System.out.println("Enter Salary: ");
                            sal=sc.nextInt();
                            k=st.executeUpdate("insert into Employee values(" + eno + ",'"+ nm + "'," + sal +")");
                            if(k>0)
                            {
                                System.out.println("Record Inserted Successfully..!!");
                                System.out.println("..............................................");
                            }
                        }
                        break;
                    case 2:
                        System.out.print("Enter the Employee no: ");
                        eno=sc.nextInt();
                        System.out.print("Enter what to update: ");
                        update = sc.next();
                        System.out.print("Enter " + update + ": ");
                        nm = sc.next();
                        k=st.executeUpdate("update Employee set " + update + "='" + nm + "' where eno="+eno);
                        if(k>0)
                        {
                            System.out.println("Record Is Updated..!!");
                        }
                        System.out.println("...............................................");
                        break;
                    case 3:
                        ResultSet rs=st.executeQuery("select * from Employee");
                        while(rs.next())
                        {
                            System.out.println(rs.getInt(1) +"\t" +rs.getString(2)+"\t"+rs.getInt(3));
                        }
                        System.out.println(".............................................");
                        break;
                    case 4:
                        System.exit(0);
                }
            }
            while(ch!=4);
        }
        catch(Exception e)
        {
            System.out.println("Error");
        }
    }
}

//Write a JSP program which accepts UserName in a TextBox and greets the user
according to the time on server machine. 

//html
 <html>
    <body>
        <form action="Main.jsp" method="post">
            Enter Username : <input type="text" name="name"><br>
            <input type="submit" value="Submit">
        </form>
    </body>
</html>

//jsp
<%@page import="java.util.Calendar"%>
<%@page contentType="text/html" pageEncoding="UTF-8"%>

<%
String name = request.getParameter("name");

Calendar rightnow = Calendar.getInstance();
int time = rightnow.get(Calendar.HOUR_OF_DAY);

if (time > 0 && time <= 12) {
	out.println("Good Morning " + name);
} else if (time < 12 && time >= 16) {
	out.println("Good Afternoon" + name);
} else {
	out.println("Good Night " + name);
}
%>
slip 23
  //Write a java program to accept a String from a user and display each vowel from a String after every 3 seconds.

import java.util.*;

class Vowels extends Thread {
	String s1;

	Vowels(String s) {
		s1 = s;
		start();
	}

	public void run() {
		System.out.println("Vowels are:  ");
		for (int i = 0; i < s1.length(); i++) {
			char ch = s1.charAt(i);
			if (ch == 'a' || ch == 'e' || ch == 'i' || ch == 'o' || ch == 'u' || ch == 'A' || ch == 'E' || ch == 'I'
					|| ch == 'O' || ch == 'U')
				System.out.print(" " + ch);
				try {
					sleep(3000);
				} catch (InterruptedException e) {
					e.printStackTrace();
				}
		}
	}
}

public class Main {
	public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);
		System.out.println("Enter a string: ");
		String str1 = sc.next();
		new Vowels(str1);
	}
}

//Write a java program to accept ‘N’ student names through command line, store them
into the appropriate Collection and display them by using Iterator and ListIterator
interface.

import java.util.*;

public class Main {
	public static void main(String args[]) throws Exception {
		int n;
		LinkedList<String> li = new LinkedList<String>();
		String str = "";

		n = Integer.parseInt(args[0]);
		for (int i = 1; i <= n; i++) {
			str = args[i];
			System.out.println(str);
			li.add(str);
		}
		System.out.println("\nUsing iterator: ");
		Iterator<String> it = li.iterator();
		while(it.hasNext())
		{
			System.out.println(it.next());
		}
		
		System.out.println("\nUsing ListIterator: ");		
		ListIterator<String> lt = li.listIterator();
		while (lt.hasNext()) {
			System.out.println(lt.next());
		}
	}
}
slip 24
  //1Write a java program to scroll the text from left to right continuously.

import java.util.*;

public class Main {

	public static void main(String[] args) {

		Scanner sc = new Scanner(System.in);
		System.out.println("Enter the text to scroll: ");
		String text = sc.nextLine();
		int width = 20;
		int position = 0;
		int direction = 1;
		while (true) {
			for (int i = 0; i < width; i++) {
				System.out.print(" ");
			}
			for (int i = 0; i < text.length(); i++) {
				if (i + position >= 0 && i + position < width) {
					System.out.print(text.charAt(i));
				} else {
					System.out.print(" ");
				}
			}
			position += direction;
			if (position == width - text.length() || position == 0) {
				direction = -direction;
			}
			try {
				Thread.sleep(100);
			} catch (InterruptedException e) {
				e.printStackTrace();
			}
			for (int i = 0; i < width + text.length(); i++) {
				System.out.print("\b");
			}
		}
	}
}

//2Write a JSP script to accept username and password from user, if they are same then
display “Login Successfully” message in Login.html file, otherwise display “Login
Failed” Message in Error.html file.

//Main.html
<html>
<head>
<title>Login Page</title>
</head>
<body>
	<form action="Main.jsp">
		Enter User Id and Password
		<br>UserId: <input type="text" name="id" /> <br>
		<br> Password: <input type="text" name="pass" /> <br>
		<br> <input type="submit" value="Sign In" />
	</form>
</body>
</html>

//Main.jsp
<html>
<head>
<title>Check Credentials</title>
</head>
<body>
<%
        String uid=request.getParameter("id");
        String password=request.getParameter("pass");
        session.setAttribute("session-uid", uid);
        if(uid.equals(password))
        {
			response.sendRedirect("login.html");
        }
        else
		{
            response.sendRedirect("error.html");
        }
%>
</body>
</html>

//login.html
<html>
<head><title>Success Page</title></head>
<body>
        <h1>Login Successful..</h1>
</body>
</html>

//error.html
<html>
<head><title>Sign-in Failed Page</title></head>
<body>
        <h1>User Id and Password are not same. Please try Again.</h1>
</body>
</html>
  
slip 25
  //1) Write a JSP program to accept Name and Age of Voter and check whether he is eligible for voting or not. 

//html
<html>
<body>
	<form action="Main.jsp" method="post">
		Name : <input type="text" name="name"> Age : <input
			type="text" name="age"> <input type="submit" value="Check">
	</form>
</body>
</html>

//jsp
<%@page contentType="text/html" pageEncoding="UTF-8"%>
<!DOCTYPE html>
<%
String name = request.getParameter("name");
int age = Integer.parseInt(request.getParameter("age"));
if (age >= 18) {
	out.println(name + " is Allowed to vote");
} else {
	out.println(name + " is Not allowed to vote");
}
%>


//2) Write a Java Program for the following: Assume database is already created
*/
package com.mycompany.javaslip;
import java.awt.BorderLayout;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTextField;
public class slip25_2
{
    JFrame frame;
    JButton b1, b2, b3;
    JTextField tf;
   
    slip25_2() throws SQLException {
        frame = new JFrame("DB App");
        frame.setLayout(new BorderLayout());
        frame.setSize(600, 100);
       
        JPanel p1 = new JPanel();
        JPanel p2 = new JPanel();
       
        tf = new JTextField();
        p1.setLayout(new GridLayout(1, 2));
        p1.add(new JLabel("Type your DDL query:"));
        p1.add(tf);
       
        b1 = new JButton("Create Table");
        b2 = new JButton("Alter Table");
        b3 = new JButton("Drop Table");
        p2.setLayout(new GridLayout(1, 3));
        p2.add(b1);
        p2.add(b2);
        p2.add(b3);
       
        Connection conn = DriverManager.getConnection("jdbc:postgresql://localhost:5432/postgres", "postgres", "postgres");
       
        b1.addActionListener((ActionEvent e) -> {
            try {
                create(conn);
            } catch (SQLException ex) {
               Logger.getLogger(S25Q2.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        b2.addActionListener((ActionEvent e) -> {
            try {
                alter(conn);
            } catch (SQLException ex) {
                Logger.getLogger(S25Q2.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        b3.addActionListener((ActionEvent e) -> {
            try {
                drop(conn);
            } catch (SQLException ex) {
                Logger.getLogger(S25Q2.class.getName()).log(Level.SEVERE, null, ex);
            }
        });
        frame.add(p1, BorderLayout.CENTER);
        frame.add(p2, BorderLayout.SOUTH);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setVisible(true);
    }
   
    private void create(Connection conn) throws SQLException {
        String sql = tf.getText();        
        Statement stmt = conn.createStatement();
        stmt.execute(sql);
    }
    private void alter(Connection conn) throws SQLException {
        String sql = tf.getText();        
        Statement stmt = conn.createStatement();
        stmt.execute(sql);
    }
    private void drop(Connection conn) throws SQLException {
        String sql = tf.getText();        
        Statement stmt = conn.createStatement();
        stmt.execute(sql);
    }
   
    public static void main(String[] args) throws SQLException {
        new S25Q2();
    }
}

/*
slip 26
  //Write a Java program to delete the details of given employee (ENo EName Salary). Accept employee ID through command line. (Use PreparedStatement Interface)

import java.sql.*;

class Main {
	public static void main(String args[]) {
		Connection con;
		PreparedStatement ps;
		ResultSet rs;
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			con = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");
			if (con == null) {
				System.out.println("Connection Failed....");
				System.exit(1);
			}
			System.out.println("Connection Established...");
			ps = con.prepareStatement("select * from employee where eid=?");
			int id = Integer.parseInt(args[0]);
			ps.setInt(1, id);

			rs = ps.executeQuery();
			System.out.println("eno\t" + "ename\t" + "salary");
			while (rs.next()) {
				System.out.println(
						"\n" + rs.getInt(1) + "\t" + rs.getString(2) + "\t" + rs.getString(3));
			}
			con.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}

//Write a JSP program to calculate sum of first and last digit of a given number. Display
sum in Red Color with font size 18.

//html
<!DOCTYPE html>
<html>
<head>
<title>PERFECT NUMBER</title>
</head>
<body>
	<form action="Main.jsp" method="post">
		Enter Number : <input type="text" name="num"> <input type="submit" value="Submit" name="num">
	</form>
</body>
</html>

//jsp
<html>
<body>
	<%!int n, rem, r;%>
	<%
	n = Integer.parseInt(request.getParameter("num"));
	if (n < 10) {
		out.println("Sum of first and last digit is ");
	%><font size=18 color=red><%=n%> </font>
	<%
	} else {
	rem = n % 10;
	do {
		r = n % 10;
		n = n / 10;
	} while (n > 0);
	n = rem + r;
	out.println("Sum of first and last digit is: ");
	%><font size=18 color=red><%=n%> </font>
	<%
	}
	%>
</body>
</html>
    slip 27
    //Write a Java Program to display the details of College (CID, CName, address, Year) on JTable. 

import java.sql.*;
import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.table.*;

class Main extends JFrame implements ActionListener {

    Connection con;
    ResultSet rs;
    Statement st;

    static JTable table;
    String[] columnNames = { "CID", "CName", "Address", "Year" };
    JFrame frm;
    JPanel p1;
    String c_id = "", c_name = "", address = "", year = "";
    JTextField txtid, txtname, txtdesc, textstatus;
    JButton Display, Exit;

    Main() {
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setTitle("PROJECT INFO");

        p1 = new JPanel();
        p1.setLayout(new GridLayout(2, 2, 30, 30));
        Display = new JButton("Display");
        p1.add(Display);
        Exit = new JButton("Exit");
        p1.add(Exit);
        Display.addActionListener(this);
        Exit.addActionListener(this);
        add(p1, BorderLayout.CENTER);
        setVisible(true);
        setSize(600, 600);
    }

    public void actionPerformed(ActionEvent ae) {
        if (ae.getSource() == Display) {
            frm = new JFrame("DISPLAY");
            setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            setLayout(new BorderLayout());
            DefaultTableModel model = new DefaultTableModel();
            model.setColumnIdentifiers(columnNames);
            table = new JTable();
            table.setModel(model);
            table.setAutoResizeMode(JTable.AUTO_RESIZE_ALL_COLUMNS);
            table.setFillsViewportHeight(true);
            JScrollPane scroll = new JScrollPane(table);
            scroll.setHorizontalScrollBarPolicy(JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED);
            scroll.setVerticalScrollBarPolicy(JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED);
            try {
            	Class.forName("com.mysql.cj.jdbc.Driver");
        		con = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");
                st = con.createStatement();
                rs = st.executeQuery("select * from college");
                while (rs.next()) {
                    c_id = rs.getString(1);
                    c_name = rs.getString(2);
                    address = rs.getString(3);
                    year = rs.getString(4);
                    model.addRow(new Object[] { c_id, c_name, address, year });
                }
                frm.add(scroll);
                frm.setVisible(true);
                frm.setSize(400, 400);
            }
            catch (Exception e) {
                JOptionPane.showMessageDialog(null, e, "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
        if (ae.getSource() == Exit) {
            System.exit(1);
        }
    }
    public static void main(String arg[]) {
        new Main();
    }
}

//Write a SERVLET program to change inactive time interval of session.

import java.io.*;
import javax.servlet.*;
import javax.servlet.annotation.WebServlet;
import javax.servlet.http.*;

@WebServlet("/MyServlet")
public class MyServlet extends HttpServlet {
	public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
		res.setContentType("text/html");
		PrintWriter out = res.getWriter();
		HttpSession session = req.getSession();
		out.println("<HTML><HEAD><TITLE>SessionTimer</TITLE></HEAD>");
		out.println("<BODY><H1>Session Timer</H1>");
		out.println("The previous timeout was " + session.getMaxInactiveInterval());
		out.println("<BR>");
		session.setMaxInactiveInterval(2 * 60 * 60); // two hours
		out.println("The newly assigned timeout is " + session.getMaxInactiveInterval());
		out.println("</BODY></HTML>");
	}
}
    slip 28
      //Write a JSP script to accept a String from a user and display it in reverse order.

<html>
<body>
	<form method = "post">
		Enter a string: <input type = "text" name = "str1"><br><br>
		<input type = "submit" value="Reverse">
	</form>
	<br><br>
	<%
		String str1 = request.getParameter("str1");
		if(str1 != null && !str1.isEmpty()){
			String revStr = new StringBuilder(str1).reverse().toString();
			out.println("Original string: " + str1 + "<br>");
			out.println("Reversed string: " + revStr + "<br>");
		}
	%>
</body>
</html>

//Write a java program to display name of currently executing Thread in multithreading.

class Main{
	public static void main(String[] args) {
		Thread t = Thread.currentThread();
		System.out.println("Currently executing thread is: " + t.getName());
	}
}
    slip 29
      //Write a Java program to display information about all columns in the DONAR table using ResultSetMetaData. 

import java.sql.*;

class Main{
	public static void main(String args[]) {
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			Connection con = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");

			PreparedStatement ps = con.prepareStatement("select * from donar");
			ResultSet rs = ps.executeQuery();
			ResultSetMetaData rsmd = rs.getMetaData();
			int col = rsmd.getColumnCount();

			System.out.println("Total columns: " + col);
			
			for(int i=1;i<=col;i++) {
				System.out.println("Column Name of column " + i + ": " + rsmd.getColumnName(i));
				System.out.println("Column Type Name of column " + i + ": " + rsmd.getColumnTypeName(i));
			}
			con.close();
		} catch (Exception e) {
			System.out.println(e);
		}
	}
}

//Write a Java program to create LinkedList of integer objects and perform the following:

import java.util.*;
class Main{
	
	public static void main(String[] args) {
		int choice = 0;
		Scanner sc = new Scanner(System.in);
		LinkedList<Integer> ll = new LinkedList<Integer>();
		
		while(choice != 5) {
			System.out.println("1. Add element at the first. 2. Delete last element of the list. 3. Display size. 4 Display Linked List. 5"
					+ ". Exit");
			System.out.print("Enter choice: ");
			choice = sc.nextInt();
			switch(choice) {
			case 1:
				System.out.print("Enter element name: ");
				ll.addFirst(sc.nextInt());
				break;
			case 2:
				ll.removeLast();
				break;
			case 3:
				System.out.println("Size of linked list is: " + ll.size());
				break;
			case 4:
				System.out.println("Linked list is: " + ll);
				break;
			case 5:
				System.exit(0);
			}
		}
	}
}
    slip 30
      //Write a java program for the implementation of synchronization.

class Table {
	synchronized void printTable(int n) {
		for (int i = 1; i <= 5; i++) {
			System.out.println(n * i);

			try {
				Thread.sleep(400);
			} catch (Exception e) {
				System.out.println(e);
			}
		}
	}
}

class MyThread1 extends Thread {
	Table t;

	MyThread1(Table t) {
		this.t = t;
	}

	public void run() {
		t.printTable(5);
	}
}

class MyThread2 extends Thread {
	Table t;

	MyThread2(Table t) {
		this.t = t;
	}

	public void run() {
		t.printTable(20);
	}
}

class Main {
	public static void main(String args[]) {
		// shared object
		Table obj = new Table();
		MyThread1 t1 = new MyThread1(obj);
		MyThread2 t2 = new MyThread2(obj);
		t1.start();
		t2.start();
	}
}

//Write a Java Program for the implementation of scrollable ResultSet. Assume Teacher
table with attributes (TID, TName, Salary) is already created. 

import java.sql.*;
import java.util.*;

class Main {
	public static void main(String args[]) {
		Connection conn = null;
		Statement stmt = null;
		ResultSet rs = null;
		int ch;
		Scanner s = new Scanner(System.in);
		try {
			Class.forName("com.mysql.cj.jdbc.Driver");
			conn = DriverManager.getConnection("jdbc:mysql://localhost:3306/student", "root", "student");
			stmt = conn.createStatement(ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_UPDATABLE);
			rs = stmt.executeQuery("select * from teacher");
			int count = 0;
			while (rs.next())
				count++;
			System.out.println("Total Records are = " + count);
			do {
				System.out.println("1 First. 2 Last. 3 Next. 4 Prev. 5. Exit");
				ch = s.nextInt();
				switch (ch) {
				case 1:
					rs.first();
					System.out.println("TId :" + rs.getInt(1) + " TName :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 2:
					rs.last();
					System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 3:
					rs.next();
					if (rs.isAfterLast())
						System.out.println("Can't move forword");
					else
						System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 4:
					rs.previous();
					if (rs.isBeforeFirst())
						System.out.println("Can't move backword");
					else
						System.out.println("Roll :" + rs.getInt(1) + " Name :" + rs.getString(2) + " TSalary : " + rs.getString(3));
					break;
				case 5:
					break;
				default:
					System.out.println("Enter valid operation");
				}
			} while (ch != 5);
		}
		catch (Exception e) {
			System.out.println(e);
		}
	}
}
       


  
